// Code generated by protoc-gen-go. DO NOT EDIT.
// source: intercom.proto

package intercom

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type GreupTranferReq struct {
	Receivers            []uint32      `protobuf:"varint,1,rep,packed,name=receivers,proto3" json:"receivers,omitempty"`
	Message              *GroupMessage `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	XXX_NoUnkeyedLiteral struct{}      `json:"-"`
	XXX_unrecognized     []byte        `json:"-"`
	XXX_sizecache        int32         `json:"-"`
}

func (m *GreupTranferReq) Reset()         { *m = GreupTranferReq{} }
func (m *GreupTranferReq) String() string { return proto.CompactTextString(m) }
func (*GreupTranferReq) ProtoMessage()    {}
func (*GreupTranferReq) Descriptor() ([]byte, []int) {
	return fileDescriptor_4b7dc4dbe05ff714, []int{0}
}

func (m *GreupTranferReq) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_GreupTranferReq.Unmarshal(m, b)
}
func (m *GreupTranferReq) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_GreupTranferReq.Marshal(b, m, deterministic)
}
func (m *GreupTranferReq) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GreupTranferReq.Merge(m, src)
}
func (m *GreupTranferReq) XXX_Size() int {
	return xxx_messageInfo_GreupTranferReq.Size(m)
}
func (m *GreupTranferReq) XXX_DiscardUnknown() {
	xxx_messageInfo_GreupTranferReq.DiscardUnknown(m)
}

var xxx_messageInfo_GreupTranferReq proto.InternalMessageInfo

func (m *GreupTranferReq) GetReceivers() []uint32 {
	if m != nil {
		return m.Receivers
	}
	return nil
}

func (m *GreupTranferReq) GetMessage() *GroupMessage {
	if m != nil {
		return m.Message
	}
	return nil
}

func init() {
	proto.RegisterType((*GreupTranferReq)(nil), "intercom.GreupTranferReq")
}

func init() { proto.RegisterFile("intercom.proto", fileDescriptor_4b7dc4dbe05ff714) }

var fileDescriptor_4b7dc4dbe05ff714 = []byte{
	// 230 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x74, 0x90, 0xcf, 0x4a, 0x03, 0x31,
	0x10, 0xc6, 0x59, 0x05, 0x5b, 0xa7, 0xad, 0x85, 0x41, 0xa4, 0x16, 0x0f, 0xc5, 0x53, 0x4f, 0x45,
	0xaa, 0x78, 0x12, 0xa4, 0x17, 0xf7, 0xa4, 0xc2, 0xe2, 0x0b, 0xc4, 0xf5, 0xcb, 0x12, 0xa4, 0xc9,
	0x3a, 0x49, 0x05, 0x5f, 0xdc, 0xb3, 0xd4, 0x6c, 0xdd, 0x08, 0xdd, 0x63, 0x7e, 0xf3, 0xfd, 0x23,
	0x74, 0x62, 0x6c, 0x80, 0x94, 0x6e, 0xbd, 0xa8, 0xc5, 0x05, 0xc7, 0xfd, 0xdd, 0x7b, 0x3a, 0x5a,
	0xc3, 0x7b, 0x55, 0x21, 0x1e, 0x2e, 0x15, 0x8d, 0x73, 0xc1, 0xa6, 0x7e, 0x11, 0x65, 0x35, 0xa4,
	0xc0, 0x07, 0x5f, 0xd0, 0xb1, 0xa0, 0x84, 0xf9, 0x84, 0xf8, 0x49, 0x36, 0x3b, 0x9c, 0x8f, 0x8a,
	0x16, 0xf0, 0x15, 0xf5, 0x9a, 0x84, 0xc9, 0xc1, 0x2c, 0x9b, 0x0f, 0x96, 0x67, 0x8b, 0xbf, 0xae,
	0x5c, 0xdc, 0xa6, 0x7e, 0x8c, 0xd7, 0x62, 0x27, 0x5b, 0x7e, 0x67, 0xd4, 0xcb, 0x05, 0x08, 0x10,
	0xbe, 0xa5, 0x7e, 0x10, 0x65, 0xbd, 0x86, 0xf0, 0x69, 0x6b, 0x7c, 0xb6, 0x68, 0x6c, 0xd3, 0x84,
	0xae, 0xca, 0xf7, 0x86, 0xf2, 0x3d, 0x0d, 0xab, 0x6d, 0x78, 0x88, 0x33, 0xf9, 0x3c, 0x2d, 0xfd,
	0x37, 0xbf, 0x23, 0xe0, 0x8e, 0x86, 0x5a, 0x0c, 0xec, 0xdb, 0x93, 0x0b, 0x46, 0x7f, 0x71, 0xb2,
	0xfa, 0xa1, 0xe5, 0x5d, 0xf5, 0x37, 0x34, 0x88, 0xee, 0x55, 0x25, 0x00, 0x8f, 0x13, 0xd1, 0x16,
	0xec, 0x77, 0xbd, 0x1e, 0xfd, 0x7e, 0xf1, 0xf5, 0x4f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xf3, 0x4f,
	0x46, 0x70, 0x8d, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// GreeterClient is the client API for Greeter service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type GreeterClient interface {
	//接收起来连接服务器发送过来的中转消息
	Transfer(ctx context.Context, in *OneMessage, opts ...grpc.CallOption) (*AckMessage, error)
	Grouptranfer(ctx context.Context, in *GreupTranferReq, opts ...grpc.CallOption) (*AckMessage, error)
	FriendNotify(ctx context.Context, in *FriendNotife, opts ...grpc.CallOption) (*AckMessage, error)
	//同意好友邀请的通知
	FriendAgree(ctx context.Context, in *Agree, opts ...grpc.CallOption) (*AckMessage, error)
}

type greeterClient struct {
	cc *grpc.ClientConn
}

func NewGreeterClient(cc *grpc.ClientConn) GreeterClient {
	return &greeterClient{cc}
}

func (c *greeterClient) Transfer(ctx context.Context, in *OneMessage, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/intercom.Greeter/transfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) Grouptranfer(ctx context.Context, in *GreupTranferReq, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/intercom.Greeter/grouptranfer", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FriendNotify(ctx context.Context, in *FriendNotife, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/intercom.Greeter/friendNotify", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *greeterClient) FriendAgree(ctx context.Context, in *Agree, opts ...grpc.CallOption) (*AckMessage, error) {
	out := new(AckMessage)
	err := c.cc.Invoke(ctx, "/intercom.Greeter/friendAgree", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GreeterServer is the server API for Greeter service.
type GreeterServer interface {
	//接收起来连接服务器发送过来的中转消息
	Transfer(context.Context, *OneMessage) (*AckMessage, error)
	Grouptranfer(context.Context, *GreupTranferReq) (*AckMessage, error)
	FriendNotify(context.Context, *FriendNotife) (*AckMessage, error)
	//同意好友邀请的通知
	FriendAgree(context.Context, *Agree) (*AckMessage, error)
}

// UnimplementedGreeterServer can be embedded to have forward compatible implementations.
type UnimplementedGreeterServer struct {
}

func (*UnimplementedGreeterServer) Transfer(ctx context.Context, req *OneMessage) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Transfer not implemented")
}
func (*UnimplementedGreeterServer) Grouptranfer(ctx context.Context, req *GreupTranferReq) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Grouptranfer not implemented")
}
func (*UnimplementedGreeterServer) FriendNotify(ctx context.Context, req *FriendNotife) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendNotify not implemented")
}
func (*UnimplementedGreeterServer) FriendAgree(ctx context.Context, req *Agree) (*AckMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendAgree not implemented")
}

func RegisterGreeterServer(s *grpc.Server, srv GreeterServer) {
	s.RegisterService(&_Greeter_serviceDesc, srv)
}

func _Greeter_Transfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OneMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Transfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intercom.Greeter/Transfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Transfer(ctx, req.(*OneMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_Grouptranfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GreupTranferReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).Grouptranfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intercom.Greeter/Grouptranfer",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).Grouptranfer(ctx, req.(*GreupTranferReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FriendNotify_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FriendNotife)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FriendNotify(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intercom.Greeter/FriendNotify",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FriendNotify(ctx, req.(*FriendNotife))
	}
	return interceptor(ctx, in, info, handler)
}

func _Greeter_FriendAgree_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Agree)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GreeterServer).FriendAgree(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/intercom.Greeter/FriendAgree",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GreeterServer).FriendAgree(ctx, req.(*Agree))
	}
	return interceptor(ctx, in, info, handler)
}

var _Greeter_serviceDesc = grpc.ServiceDesc{
	ServiceName: "intercom.Greeter",
	HandlerType: (*GreeterServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "transfer",
			Handler:    _Greeter_Transfer_Handler,
		},
		{
			MethodName: "grouptranfer",
			Handler:    _Greeter_Grouptranfer_Handler,
		},
		{
			MethodName: "friendNotify",
			Handler:    _Greeter_FriendNotify_Handler,
		},
		{
			MethodName: "friendAgree",
			Handler:    _Greeter_FriendAgree_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "intercom.proto",
}
